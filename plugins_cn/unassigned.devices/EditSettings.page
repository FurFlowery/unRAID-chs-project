Title="Edit Settings"
---
<?php
/* Copyright 2015, Guilherme Jardim
 * Copyright 2016-2020, Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin = "unassigned.devices";
$docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
$translations = file_exists("$docroot/webGui/include/Translations.php");
require_once "$docroot/plugins/$plugin/include/Legacy.php";
?>
<?if (! $translations):?>
<?eval('?>'.parse_file("$docroot/plugins/$plugin/EditSettings.page"))?>
<?else:?>
<?
require_once("plugins/{$plugin}/include/lib.php");

function safe_filename($string) {
	$string = preg_replace('~[^0-9a-z -_]~i', '', $string);
	/* Remove special characters from file name */
	$string = str_replace( array("(", ")", "$"), "", $string);
	return preg_replace('~[ ]~i', '_', $string);
}

$background = "checked";
$partition = "";
$disk_setting = TRUE;
$show_switches = TRUE;
$disabled = "";

if (isset($_GET['s'])) {
	$serial = $_GET['s'];
	$partition = $_GET['p'];
	$mount_point = $_GET['l'];
	$info = $_GET['m'];
	$file = get_config($serial,"command.{$partition}");
	if (($file) && (! file_exists($file))) {
		set_config($serial,"command.{$partition}","");
		$file = "";
	}
	$user_file = get_config($serial,"user_command.{$partition}");
	if ((($user_file) && (! file_exists($user_file))) || (($user_file) && (! $file))) {
		set_config($serial,"user_command.{$partition}","");
		$user_file = "";
	}
	if (! $file ) {
		$file = safe_filename("/boot/config/plugins/{$plugin}/".urldecode($_GET['l'])).".sh";
	} else {
		$background = (get_config($serial,"command_bg.{$partition}") == "true" ) ? "checked" : "";
	}
	$pass_through = (get_config($serial,"pass_through") == "yes") ? "checked" : "";
	$read_only = (get_config($serial,"read_only") == "yes" ) ? "checked" : "";
	$automount = (get_config($serial,"automount") == "yes" ) ? "checked" : "";
	$share = (get_config($serial, "share.{$partition}") == "yes" ) ? "checked" : "";
	$show_partitions = (get_config($serial,"show_partitions") == "yes" ) ? "checked" : "";
	$width = "50%";
	$automount_action = "automount";
	$ud_device = $serial;
	$background_action = "background";
	$share_action = "toggle_share";
	if (! $_GET['t']) {
		$disk_setting = FALSE;
		$show_switches = FALSE;
	}
} else if (isset($_GET['d'])) {
	$device = $_GET['d'];
	$mount_point = $_GET['l'];
	$info = $_GET['m'];
	$file = get_samba_config($device,"command");
	if (($file) && (! file_exists($file))) {
		set_samba_config($device,"command","");
		$file = "";
	}
	$user_file = get_samba_config($device,"user_command");
	if ((($user_file) && (! file_exists($user_file))) || (($user_file) && (! $file))) {
		set_samba_config($device,"user_command","");
		$user_file = "";
	}
	if (! $file ) {
		$file = safe_filename("/boot/config/plugins/{$plugin}/".urldecode($_GET['l'])).".sh";
	} else {
		$background = (get_samba_config($device,"command_bg") == "true" ) ? "checked" : "";
	}
	$automount = (get_samba_config($device,"automount") == "yes" ) ? "checked" : "";
	$share = (get_samba_config($device, "smb_share") == "yes" ) ? "checked" : "";
	$width = "18%";
	$automount_action = "samba_automount";
	$ud_device = $device;
	$background_action = "samba_background";
	$share_action = "toggle_samba_share";
	$disk_setting = FALSE;
} else if (isset($_GET['i'])) {
	$device = $_GET['i'];
	$mount_point = $_GET['l'];
	$file = get_iso_config($device,"command");
	if (($file) && (! file_exists($file))) {
		set_iso_config($device,"command","");
		$file = "";
	}
	if (! $file ) {
		$file = safe_filename("/boot/config/plugins/{$plugin}/".urldecode($_GET['l'])).".sh";
	} else {
		$background = (get_iso_config($device,"command_bg") == "true" ) ? "checked" : "";
	}

	$automount = (get_iso_config($device,"automount") == "yes" ) ? "checked" : "";
	$witdh = "20%";
	$automount_action = "iso_automount";
	$ud_device = $device;
	$background_action = "iso_background";
	$disk_setting = FALSE;
}

if ((! file_exists($file)) || (! is_dir("/boot/config/plugins/user.scripts/scripts/"))) {
	$disabled = "disabled";
}

$text = @file_get_contents($file);
$default_text = <<<EOT
#!/bin/bash
PATH=/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin
## Available variables: 
# AVAIL      : available space
# USED       : used space
# SIZE       : partition size
# SERIAL     : disk serial number
# ACTION     : if mounting, ADD; if unmounting, UNMOUNT; if unmounted, REMOVE; if error, ERROR_MOUNT, ERROR_UNMOUNT
# MOUNTPOINT : where the partition is mounted
# FSTYPE     : partition filesystem
# LABEL      : partition label
# DEVICE     : partition device, e.g /dev/sda1
# OWNER      : "udev" if executed by UDEV, otherwise "user"
# PROG_NAME  : program name of this script
# LOGFILE    : log file for this script

case \$ACTION in
  'ADD' )
    # do your stuff here
	/usr/local/emhttp/webGui/scripts/notify -e "Unraid Server Notice" -s "Unassigned Devices" -d "Device mounted" -i "normal"
  ;;

  'UNMOUNT' )
    # do your stuff here
	/usr/local/emhttp/webGui/scripts/notify -e "Unraid Server Notice" -s "Unassigned Devices" -d "Device unmounting" -i "normal"
  ;;

  'REMOVE' )
    # do your stuff here
	/usr/local/emhttp/webGui/scripts/notify -e "Unraid Server Notice" -s "Unassigned Devices" -d "Device unmounted" -i "normal"
  ;;

  'ERROR_MOUNT' )
    # do your stuff here
	/usr/local/emhttp/webGui/scripts/notify -e "Unraid Server Notice" -s "Unassigned Devices" -d "Error mounting device" -i "alert"
  ;;

  'ERROR_UNMOUNT' )
    # do your stuff here
	/usr/local/emhttp/webGui/scripts/notify -e "Unraid Server Notice" -s "Unassigned Devices" -d "Error unmounting device" -i "alert"
  ;;
esac
EOT;

$prompt=_("Delete Script File");
$remove = is_file($file) ? "<a title='$prompt' class='exec' onclick='rmfile(\"{$file}\");'><i class='fa fa-times-circle' style='color:red;font-size: 25px;'></i></a> " : "";
?>

<script type="text/javascript" src="<?autov('/webGui/javascript/jquery.switchbutton.js')?>"></script>
<script type="text/javascript" src="<?autov('/webGui/javascript/jquery.filetree.js')?>"></script>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.ui.css')?>">
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.switchbutton.css')?>">
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.filetree.css')?>" >

<script type="text/javascript" src="<?autov('/plugins/'.$plugin.'/assets/arrive.min.js')?>"></script>

<style type="text/css">
	.fileTree {
		border: solid 1px #BBB;
		background: #FFF;
		overflow: scroll;
		padding: 5px;
		position:absolute;
		z-index:100;
		display:none;
		color:initial;
	}
</style>

<form markdown="1" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#include" value="/webGui/include/update.file.php">

<?if ($disk_setting):?>
<strong>_(Disk Serial)_: </strong><?=$serial;?>
<?else:?>
<strong>_(Mount Point)_: </strong><?=$mount_point;?>
<?endif;?>

<?if ($show_switches):?>
<table style='width: <?=$width;?>;' class='usb_disks'><thead><tr><td></td><td></td><td></td><td></td></tr></thead>
<tr>
&nbsp;
<?if (isset($_GET['s'])):?>
<td title='_(Turn on to mark this Device as passed through to a VM or Docker Container)_.'><input type='checkbox' class='passthrough-switch'></td>
<td title='_(Turn on to Mount Device Read only)_.'><input type='checkbox' class='readonly-switch'></td>
<?endif;?>

<td title='_(Turn on to Mount Device when Array is Started)_.'><input type='checkbox' class='automount-switch'></td>
<?endif;?>

<?if (! isset($_GET['i'])):?>
<td title='_(Turn on to Share Device with SMB and/or NFS)_.'><input type='checkbox' class='share-switch' info='<?=$info?>'></td>
<?endif;?>

<?if ($show_switches):?>
<?if (isset($_GET['s'])):?>
<td title='_(Turn on to show all partitions on this device by default)_.'><input type='checkbox' class='partitions-switch'></td>
<?endif;?>
</tr>
</table>
<?endif;?>
<button type="button" onclick="done()">_(Done)_</button>

:ud_edit_script_device_settings_plug:
> Select the options for this device/mount point.  These changes are made immediately.  You don't need to click 'Save' to save them.
:end

<strong>_(Script File)_:</strong>
<span>&nbsp;&nbsp;&nbsp;<input type="text" title='_(Enter Script File Name)_.' name="#file" style="width:40%;" onclick="openFileBrowser(this,'/boot/config/plugins/<?=$plugin;?>/','sh',false,true);" autocomplete="off" value="<?=$file;?>"><?=$remove;?></span>

:ud_edit_script_choose_name_plug:
> Choose your script name from the file selection dropdown, or enter your desired script name.
:end

<span title='_(Turn on to run Script File in the background)_.'><input type="checkbox" class="background-switch"></span>

:ud_edit_script_run_background_plug:
> Turn on the 'Run in Background' to have the script run as a background task.  This can keep the Unassigned Devices UI from hanging when the script is run from the UI.
:end

<? if (! $_GET['i']):?>
<strong>_(User Script)_:</strong>
<span><input type="text" title='_(Enter User Script File Name)_.' name="#user_file" style="width:40%;" onclick="openFileBrowser(this,'/boot/config/plugins/user.scripts/scripts/','',false,true);" autocomplete="off" placeholder="Enter the User Script that will be using this device" value="<?=$user_file;?>" <?=$disabled;?>></span>

:ud_edit_user_script_choose_name_plug:
> If you have the User Scripts plugin installed, you can have Unassigned Devices show the running status of the User Script that will be using this device.
:end
<?endif;?>

<br />
<strong>_(Script content)_:</strong>
<br />

<textarea spellcheck="false" cols="80" rows="22" name="text" title='_(Enter and Edit the Script that runs when a udev or operator event occurs)_.' style="font-family:bitstream;width:80%"><?=$text;?></textarea>

:ud_edit_script_buttons_plug:
> Click the **Save** button to commit the current edits.  Click **Reset** to undo any changes you make (before Saving). Click **Done** to exit this page.
>
> Click the **Default Script** button to initialize the edit box with a default script.
> You still need to click **Save** in order to commit the change.
:end

<button type="button" title='_(Load the default script)_.' onclick="setDefault(this.form)">_(Default Script)_</button>
<input type="reset" title='_(Undo your changes since last Save)_.' value='_(Reset)_'/>
<input type="submit" title='_(Save your Script File file changes)_.' value='_(Save)_'/>
<button type="button" onclick="done()">_(Done)_</button>

</form>

<script>
	var UDURL		= '/plugins/<?=$plugin;?>/UnassignedDevices.php';

	$('.passthrough-switch').switchButton({ labels_placement: "left", on_label: "<?=_('Pass Through');?>", off_label: "<?=_('Pass Through');?>", checked:"<?=$pass_through;?>" });
	$('.passthrough-switch').change(function()
	{
		$.post(UDURL,{action:"toggle_pass_through",serial:"<?=$serial;?>",status:$(this).is(":checked")},function(data)
		{
			$(this).prop("checked",data.result);
		},"json");
	});

	$('.readonly-switch').switchButton({ labels_placement: "left", on_label: "<?=_('Read Only');?>", off_label: "<?=_('Read Only');?>", checked:"<?=$read_only;?>" });
	$('.readonly-switch').change(function()
	{
		$.post(UDURL,{action:"toggle_read_only",serial:"<?=$serial;?>",status:$(this).is(":checked")},function(data)
		{
			$(this).prop("checked",data.result);
		},"json");
	});

	$('.automount-switch').switchButton({ labels_placement: "left", on_label: "<?=_('Automount');?>", off_label: "<?=_('Automount');?>", checked:"<?=$automount;?>" });
	$('.automount-switch').change(function()
	{
		$.post(UDURL,{action:"<?=$automount_action?>",device:"<?=$ud_device;?>",status:$(this).is(":checked")},function(data)
		{
			$(this).prop("checked",data.result);
		},"json");
	});

	$('.share-switch').switchButton({ labels_placement: "left", on_label: "<?=_('Share');?>", off_label: "<?=_('Share');?>", checked:"<?=$share;?>" });
	$('.share-switch').change(function()
	{
		$.post(UDURL,{action:"<?=$share_action;?>",info:$(this).attr("info"),status:$(this).is(":checked")},function(data)
		{
			$(this).prop("checked",data.result);
		},"json");
	});

	$('.partitions-switch').switchButton({ labels_placement: "left", on_label: "<?=_('Show Partitions');?>", off_label: "<?=_('Show Partitions');?>", checked:"<?=$show_partitions;?>" });
	$('.partitions-switch').change(function()
	{
		$.post(UDURL,{action:"show_partitions",serial:"<?=$serial;?>",status:$(this).is(":checked")},function(data)
		{
			$(this).prop("checked",data.result);
		},"json");
	});

	$('.background-switch').switchButton({ labels_placement: "left", on_label: "<?=_('Run in Background');?>", off_label: "<?=_('Run in Backround');?>", checked:"<?=$background;?>" });
	$('.background-switch').change(function()
	{
		$.post(UDURL,{action:"<?=$background_action;?>",device:"<?=$ud_device;?>",part:"<?=$partition;?>",status:$(this).is(":checked")},function(data)
		{
			$(this).prop("checked",data.result);
		},"json");
	});

	<?if (isset($_GET['s'])):?>
		$( "form" ).submit(function( event ) {
			$.post(UDURL,{action:"set_command",serial:"<?=$serial;?>",part:"<?=$partition;?>",command:$("input[name='#file']").val(),user_command:$("input[name='#user_file']").val()},function(data){event.preventDefault()},"json");
		});
	<?endif;?>
	<?if (isset($_GET['d'])):?>
		$( "form" ).submit(function( event ) {
			$.post(UDURL,{action:"set_samba_command",device:"<?=$device;?>",command:$("input[name='#file']").val(),user_command:$("input[name='#user_file']").val()},function(data){event.preventDefault()},"json");
		});
	<?endif;?>
	<?if (isset($_GET['i'])):?>
		$( "form" ).submit(function( event ) {
			$.post(UDURL,{action:"set_iso_command",device:"<?=$device;?>",command:$("input[name='#file']").val()},function(data){event.preventDefault()},"json");
		});
	<?endif;?>

	function setDefault(form) {
		form.elements['text'].value = <?=json_encode($default_text);?>;
	}

	function openFileBrowser(el, root, filter, on_folders, on_files) {
		if (on_folders === undefined) on_folders = true;
		if (on_files   === undefined) on_files = true;
		if (! filter && ! on_files)   filter = 'HIDE_FILES_FILTER';
		p = $(el);
		// Skip is fileTree is already open
		if ( p.next().hasClass('fileTree') ){return null;}
		// create a random id
		var r = Math.floor((Math.random()*1000)+1);
		// Add a new span and load fileTree
		p.after("<span id='fileTree"+r+"' class='textarea fileTree'></span>");
		var ft = $('#fileTree'+r);
		ft.fileTree({
			root: root,
			filter: filter,
			allowBrowsing : true
			},
			function(file){if(on_files){p.val(file);$(ft).slideUp('fast',function (){$(ft).remove();});}},
			function(folder){if(on_folders){p.val(folder);$(ft).slideUp('fast',function (){$(ft).remove();});}}
		);
		// Format fileTree according to parent position, height and width
		ft.css({'left':p.position().left,'top':( p.position().top + p.outerHeight() ),'width':(p.width()+2) });
		// close if click elsewhere
		$(document).mouseup(function(e){if (! ft.is(e.target) && ft.has(e.target).length === 0){$(ft).slideUp('fast',function (){$(ft).remove();});}});
		// Open fileTree
		ft.slideDown('fast');
	}

	function rmfile(file) {
		$.post("/update.php",{"#command":"/plugins/unassigned.devices/scripts/rm","#arg[1]":file}).done(function(){location.reload();});
	}
</script>
<?endif;?>
